+function($) {
    "use strict";
    function Plugin(option) {
        return this.each(function() {
            var $this = $(this), data = $this.data("bs.tab");
            data || $this.data("bs.tab", data = new Tab(this)), "string" == typeof option && data[option]();
        });
    }
    var Tab = function(element) {
        this.element = $(element);
    };
    Tab.VERSION = "3.3.7", Tab.TRANSITION_DURATION = 150, Tab.prototype.show = function() {
        var $this = this.element, $ul = $this.closest("ul:not(.dropdown-menu)"), selector = $this.data("target");
        if (selector || (selector = (selector = $this.attr("href")) && selector.replace(/.*(?=#[^\s]*$)/, "")), 
        !$this.parent("li").hasClass("active")) {
            var $previous = $ul.find(".active:last a"), hideEvent = $.Event("hide.bs.tab", {
                relatedTarget: $this[0]
            }), showEvent = $.Event("show.bs.tab", {
                relatedTarget: $previous[0]
            });
            if ($previous.trigger(hideEvent), $this.trigger(showEvent), !showEvent.isDefaultPrevented() && !hideEvent.isDefaultPrevented()) {
                var $target = $(selector);
                this.activate($this.closest("li"), $ul), this.activate($target, $target.parent(), function() {
                    $previous.trigger({
                        type: "hidden.bs.tab",
                        relatedTarget: $this[0]
                    }), $this.trigger({
                        type: "shown.bs.tab",
                        relatedTarget: $previous[0]
                    });
                });
            }
        }
    }, Tab.prototype.activate = function(element, container, callback) {
        function next() {
            $active.removeClass("active").find("> .dropdown-menu > .active").removeClass("active").end().find('[data-toggle="tab"]').attr("aria-expanded", !1), 
            element.addClass("active").find('[data-toggle="tab"]').attr("aria-expanded", !0), 
            transition ? (element[0].offsetWidth, element.addClass("in")) : element.removeClass("fade"), 
            element.parent(".dropdown-menu").length && element.closest("li.dropdown").addClass("active").end().find('[data-toggle="tab"]').attr("aria-expanded", !0), 
            callback && callback();
        }
        var $active = container.find("> .active"), transition = callback && $.support.transition && ($active.length && $active.hasClass("fade") || !!container.find("> .fade").length);
        $active.length && transition ? $active.one("bsTransitionEnd", next).emulateTransitionEnd(Tab.TRANSITION_DURATION) : next(), 
        $active.removeClass("in");
    };
    var old = $.fn.tab;
    $.fn.tab = Plugin, $.fn.tab.Constructor = Tab, $.fn.tab.noConflict = function() {
        return $.fn.tab = old, this;
    };
    var clickHandler = function(e) {
        e.preventDefault(), Plugin.call($(this), "show");
    };
    $(document).on("click.bs.tab.data-api", '[data-toggle="tab"]', clickHandler).on("click.bs.tab.data-api", '[data-toggle="pill"]', clickHandler);
}(jQuery), function($, window, document, undefined) {
    function Owl(element, options) {
        this.settings = null, this.options = $.extend({}, Owl.Defaults, options), this.$element = $(element), 
        this._handlers = {}, this._plugins = {}, this._supress = {}, this._current = null, 
        this._speed = null, this._coordinates = [], this._breakpoint = null, this._width = null, 
        this._items = [], this._clones = [], this._mergers = [], this._widths = [], this._invalidated = {}, 
        this._pipe = [], this._drag = {
            time: null,
            target: null,
            pointer: null,
            stage: {
                start: null,
                current: null
            },
            direction: null
        }, this._states = {
            current: {},
            tags: {
                initializing: [ "busy" ],
                animating: [ "busy" ],
                dragging: [ "interacting" ]
            }
        }, $.each([ "onResize", "onThrottledResize" ], $.proxy(function(i, handler) {
            this._handlers[handler] = $.proxy(this[handler], this);
        }, this)), $.each(Owl.Plugins, $.proxy(function(key, plugin) {
            this._plugins[key.charAt(0).toLowerCase() + key.slice(1)] = new plugin(this);
        }, this)), $.each(Owl.Workers, $.proxy(function(priority, worker) {
            this._pipe.push({
                filter: worker.filter,
                run: $.proxy(worker.run, this)
            });
        }, this)), this.setup(), this.initialize();
    }
    Owl.Defaults = {
        items: 3,
        loop: !1,
        center: !1,
        rewind: !1,
        mouseDrag: !0,
        touchDrag: !0,
        pullDrag: !0,
        freeDrag: !1,
        margin: 0,
        stagePadding: 0,
        merge: !1,
        mergeFit: !0,
        autoWidth: !1,
        startPosition: 0,
        rtl: !1,
        smartSpeed: 250,
        fluidSpeed: !1,
        dragEndSpeed: !1,
        responsive: {},
        responsiveRefreshRate: 200,
        responsiveBaseElement: window,
        fallbackEasing: "swing",
        info: !1,
        nestedItemSelector: !1,
        itemElement: "div",
        stageElement: "div",
        refreshClass: "owl-refresh",
        loadedClass: "owl-loaded",
        loadingClass: "owl-loading",
        rtlClass: "owl-rtl",
        responsiveClass: "owl-responsive",
        dragClass: "owl-drag",
        itemClass: "owl-item",
        stageClass: "owl-stage",
        stageOuterClass: "owl-stage-outer",
        grabClass: "owl-grab"
    }, Owl.Width = {
        Default: "default",
        Inner: "inner",
        Outer: "outer"
    }, Owl.Type = {
        Event: "event",
        State: "state"
    }, Owl.Plugins = {}, Owl.Workers = [ {
        filter: [ "width", "settings" ],
        run: function() {
            this._width = this.$element.width();
        }
    }, {
        filter: [ "width", "items", "settings" ],
        run: function(cache) {
            cache.current = this._items && this._items[this.relative(this._current)];
        }
    }, {
        filter: [ "items", "settings" ],
        run: function() {
            this.$stage.children(".cloned").remove();
        }
    }, {
        filter: [ "width", "items", "settings" ],
        run: function(cache) {
            var margin = this.settings.margin || "", grid = !this.settings.autoWidth, rtl = this.settings.rtl, css = {
                width: "auto",
                "margin-left": rtl ? margin : "",
                "margin-right": rtl ? "" : margin
            };
            !grid && this.$stage.children().css(css), cache.css = css;
        }
    }, {
        filter: [ "width", "items", "settings" ],
        run: function(cache) {
            var width = (this.width() / this.settings.items).toFixed(3) - this.settings.margin, merge = null, iterator = this._items.length, grid = !this.settings.autoWidth, widths = [];
            for (cache.items = {
                merge: !1,
                width: width
            }; iterator--; ) merge = this._mergers[iterator], merge = this.settings.mergeFit && Math.min(merge, this.settings.items) || merge, 
            cache.items.merge = merge > 1 || cache.items.merge, widths[iterator] = grid ? width * merge : this._items[iterator].width();
            this._widths = widths;
        }
    }, {
        filter: [ "items", "settings" ],
        run: function() {
            var clones = [], items = this._items, settings = this.settings, view = Math.max(2 * settings.items, 4), size = 2 * Math.ceil(items.length / 2), repeat = settings.loop && items.length ? settings.rewind ? view : Math.max(view, size) : 0, append = "", prepend = "";
            for (repeat /= 2; repeat--; ) clones.push(this.normalize(clones.length / 2, !0)), 
            append += items[clones[clones.length - 1]][0].outerHTML, clones.push(this.normalize(items.length - 1 - (clones.length - 1) / 2, !0)), 
            prepend = items[clones[clones.length - 1]][0].outerHTML + prepend;
            this._clones = clones, $(append).addClass("cloned").appendTo(this.$stage), $(prepend).addClass("cloned").prependTo(this.$stage);
        }
    }, {
        filter: [ "width", "items", "settings" ],
        run: function() {
            for (var rtl = this.settings.rtl ? 1 : -1, size = this._clones.length + this._items.length, iterator = -1, previous = 0, current = 0, coordinates = []; ++iterator < size; ) previous = coordinates[iterator - 1] || 0, 
            current = this._widths[this.relative(iterator)] + this.settings.margin, coordinates.push(previous + current * rtl);
            this._coordinates = coordinates;
        }
    }, {
        filter: [ "width", "items", "settings" ],
        run: function() {
            var padding = this.settings.stagePadding, coordinates = this._coordinates, css = {
                width: Math.ceil(Math.abs(coordinates[coordinates.length - 1])) + 2 * padding,
                "padding-left": padding || "",
                "padding-right": padding || ""
            };
            this.$stage.css(css);
        }
    }, {
        filter: [ "width", "items", "settings" ],
        run: function(cache) {
            var iterator = this._coordinates.length, grid = !this.settings.autoWidth, items = this.$stage.children();
            if (grid && cache.items.merge) for (;iterator--; ) cache.css.width = this._widths[this.relative(iterator)], 
            items.eq(iterator).css(cache.css); else grid && (cache.css.width = cache.items.width, 
            items.css(cache.css));
        }
    }, {
        filter: [ "items" ],
        run: function() {
            this._coordinates.length < 1 && this.$stage.removeAttr("style");
        }
    }, {
        filter: [ "width", "items", "settings" ],
        run: function(cache) {
            cache.current = cache.current ? this.$stage.children().index(cache.current) : 0, 
            cache.current = Math.max(this.minimum(), Math.min(this.maximum(), cache.current)), 
            this.reset(cache.current);
        }
    }, {
        filter: [ "position" ],
        run: function() {
            this.animate(this.coordinates(this._current));
        }
    }, {
        filter: [ "width", "position", "items", "settings" ],
        run: function() {
            var inner, outer, i, n, rtl = this.settings.rtl ? 1 : -1, padding = 2 * this.settings.stagePadding, begin = this.coordinates(this.current()) + padding, end = begin + this.width() * rtl, matches = [];
            for (i = 0, n = this._coordinates.length; i < n; i++) inner = this._coordinates[i - 1] || 0, 
            outer = Math.abs(this._coordinates[i]) + padding * rtl, (this.op(inner, "<=", begin) && this.op(inner, ">", end) || this.op(outer, "<", begin) && this.op(outer, ">", end)) && matches.push(i);
            this.$stage.children(".active").removeClass("active"), this.$stage.children(":eq(" + matches.join("), :eq(") + ")").addClass("active"), 
            this.settings.center && (this.$stage.children(".center").removeClass("center"), 
            this.$stage.children().eq(this.current()).addClass("center"));
        }
    } ], Owl.prototype.initialize = function() {
        if (this.enter("initializing"), this.trigger("initialize"), this.$element.toggleClass(this.settings.rtlClass, this.settings.rtl), 
        this.settings.autoWidth && !this.is("pre-loading")) {
            var imgs, nestedSelector, width;
            imgs = this.$element.find("img"), nestedSelector = this.settings.nestedItemSelector ? "." + this.settings.nestedItemSelector : void 0, 
            width = this.$element.children(nestedSelector).width(), imgs.length && width <= 0 && this.preloadAutoWidthImages(imgs);
        }
        this.$element.addClass(this.options.loadingClass), this.$stage = $("<" + this.settings.stageElement + ' class="' + this.settings.stageClass + '"/>').wrap('<div class="' + this.settings.stageOuterClass + '"/>'), 
        this.$element.append(this.$stage.parent()), this.replace(this.$element.children().not(this.$stage.parent())), 
        this.$element.is(":visible") ? this.refresh() : this.invalidate("width"), this.$element.removeClass(this.options.loadingClass).addClass(this.options.loadedClass), 
        this.registerEventHandlers(), this.leave("initializing"), this.trigger("initialized");
    }, Owl.prototype.setup = function() {
        var viewport = this.viewport(), overwrites = this.options.responsive, match = -1, settings = null;
        overwrites ? ($.each(overwrites, function(breakpoint) {
            breakpoint <= viewport && breakpoint > match && (match = Number(breakpoint));
        }), "function" == typeof (settings = $.extend({}, this.options, overwrites[match])).stagePadding && (settings.stagePadding = settings.stagePadding()), 
        delete settings.responsive, settings.responsiveClass && this.$element.attr("class", this.$element.attr("class").replace(new RegExp("(" + this.options.responsiveClass + "-)\\S+\\s", "g"), "$1" + match))) : settings = $.extend({}, this.options), 
        this.trigger("change", {
            property: {
                name: "settings",
                value: settings
            }
        }), this._breakpoint = match, this.settings = settings, this.invalidate("settings"), 
        this.trigger("changed", {
            property: {
                name: "settings",
                value: this.settings
            }
        });
    }, Owl.prototype.optionsLogic = function() {
        this.settings.autoWidth && (this.settings.stagePadding = !1, this.settings.merge = !1);
    }, Owl.prototype.prepare = function(item) {
        var event = this.trigger("prepare", {
            content: item
        });
        return event.data || (event.data = $("<" + this.settings.itemElement + "/>").addClass(this.options.itemClass).append(item)), 
        this.trigger("prepared", {
            content: event.data
        }), event.data;
    }, Owl.prototype.update = function() {
        for (var i = 0, n = this._pipe.length, filter = $.proxy(function(p) {
            return this[p];
        }, this._invalidated), cache = {}; i < n; ) (this._invalidated.all || $.grep(this._pipe[i].filter, filter).length > 0) && this._pipe[i].run(cache), 
        i++;
        this._invalidated = {}, !this.is("valid") && this.enter("valid");
    }, Owl.prototype.width = function(dimension) {
        switch (dimension = dimension || Owl.Width.Default) {
          case Owl.Width.Inner:
          case Owl.Width.Outer:
            return this._width;

          default:
            return this._width - 2 * this.settings.stagePadding + this.settings.margin;
        }
    }, Owl.prototype.refresh = function() {
        this.enter("refreshing"), this.trigger("refresh"), this.setup(), this.optionsLogic(), 
        this.$element.addClass(this.options.refreshClass), this.update(), this.$element.removeClass(this.options.refreshClass), 
        this.leave("refreshing"), this.trigger("refreshed");
    }, Owl.prototype.onThrottledResize = function() {
        window.clearTimeout(this.resizeTimer), this.resizeTimer = window.setTimeout(this._handlers.onResize, this.settings.responsiveRefreshRate);
    }, Owl.prototype.onResize = function() {
        return !!this._items.length && (this._width !== this.$element.width() && (!!this.$element.is(":visible") && (this.enter("resizing"), 
        this.trigger("resize").isDefaultPrevented() ? (this.leave("resizing"), !1) : (this.invalidate("width"), 
        this.refresh(), this.leave("resizing"), void this.trigger("resized")))));
    }, Owl.prototype.registerEventHandlers = function() {
        $.support.transition && this.$stage.on($.support.transition.end + ".owl.core", $.proxy(this.onTransitionEnd, this)), 
        !1 !== this.settings.responsive && this.on(window, "resize", this._handlers.onThrottledResize), 
        this.settings.mouseDrag && (this.$element.addClass(this.options.dragClass), this.$stage.on("mousedown.owl.core", $.proxy(this.onDragStart, this)), 
        this.$stage.on("dragstart.owl.core selectstart.owl.core", function() {
            return !1;
        })), this.settings.touchDrag && (this.$stage.on("touchstart.owl.core", $.proxy(this.onDragStart, this)), 
        this.$stage.on("touchcancel.owl.core", $.proxy(this.onDragEnd, this)));
    }, Owl.prototype.onDragStart = function(event) {
        var stage = null;
        3 !== event.which && ($.support.transform ? stage = {
            x: (stage = this.$stage.css("transform").replace(/.*\(|\)| /g, "").split(","))[16 === stage.length ? 12 : 4],
            y: stage[16 === stage.length ? 13 : 5]
        } : (stage = this.$stage.position(), stage = {
            x: this.settings.rtl ? stage.left + this.$stage.width() - this.width() + this.settings.margin : stage.left,
            y: stage.top
        }), this.is("animating") && ($.support.transform ? this.animate(stage.x) : this.$stage.stop(), 
        this.invalidate("position")), this.$element.toggleClass(this.options.grabClass, "mousedown" === event.type), 
        this.speed(0), this._drag.time = new Date().getTime(), this._drag.target = $(event.target), 
        this._drag.stage.start = stage, this._drag.stage.current = stage, this._drag.pointer = this.pointer(event), 
        $(document).on("mouseup.owl.core touchend.owl.core", $.proxy(this.onDragEnd, this)), 
        $(document).one("mousemove.owl.core touchmove.owl.core", $.proxy(function(event) {
            var delta = this.difference(this._drag.pointer, this.pointer(event));
            $(document).on("mousemove.owl.core touchmove.owl.core", $.proxy(this.onDragMove, this)), 
            Math.abs(delta.x) < Math.abs(delta.y) && this.is("valid") || (event.preventDefault(), 
            this.enter("dragging"), this.trigger("drag"));
        }, this)));
    }, Owl.prototype.onDragMove = function(event) {
        var minimum = null, maximum = null, pull = null, delta = this.difference(this._drag.pointer, this.pointer(event)), stage = this.difference(this._drag.stage.start, delta);
        this.is("dragging") && (event.preventDefault(), this.settings.loop ? (minimum = this.coordinates(this.minimum()), 
        maximum = this.coordinates(this.maximum() + 1) - minimum, stage.x = ((stage.x - minimum) % maximum + maximum) % maximum + minimum) : (minimum = this.settings.rtl ? this.coordinates(this.maximum()) : this.coordinates(this.minimum()), 
        maximum = this.settings.rtl ? this.coordinates(this.minimum()) : this.coordinates(this.maximum()), 
        pull = this.settings.pullDrag ? -1 * delta.x / 5 : 0, stage.x = Math.max(Math.min(stage.x, minimum + pull), maximum + pull)), 
        this._drag.stage.current = stage, this.animate(stage.x));
    }, Owl.prototype.onDragEnd = function(event) {
        var delta = this.difference(this._drag.pointer, this.pointer(event)), stage = this._drag.stage.current, direction = delta.x > 0 ^ this.settings.rtl ? "left" : "right";
        $(document).off(".owl.core"), this.$element.removeClass(this.options.grabClass), 
        (0 !== delta.x && this.is("dragging") || !this.is("valid")) && (this.speed(this.settings.dragEndSpeed || this.settings.smartSpeed), 
        this.current(this.closest(stage.x, 0 !== delta.x ? direction : this._drag.direction)), 
        this.invalidate("position"), this.update(), this._drag.direction = direction, (Math.abs(delta.x) > 3 || new Date().getTime() - this._drag.time > 300) && this._drag.target.one("click.owl.core", function() {
            return !1;
        })), this.is("dragging") && (this.leave("dragging"), this.trigger("dragged"));
    }, Owl.prototype.closest = function(coordinate, direction) {
        var position = -1, width = this.width(), coordinates = this.coordinates();
        return this.settings.freeDrag || $.each(coordinates, $.proxy(function(index, value) {
            return "left" === direction && coordinate > value - 30 && coordinate < value + 30 ? position = index : "right" === direction && coordinate > value - width - 30 && coordinate < value - width + 30 ? position = index + 1 : this.op(coordinate, "<", value) && this.op(coordinate, ">", coordinates[index + 1] || value - width) && (position = "left" === direction ? index + 1 : index), 
            -1 === position;
        }, this)), this.settings.loop || (this.op(coordinate, ">", coordinates[this.minimum()]) ? position = coordinate = this.minimum() : this.op(coordinate, "<", coordinates[this.maximum()]) && (position = coordinate = this.maximum())), 
        position;
    }, Owl.prototype.animate = function(coordinate) {
        var animate = this.speed() > 0;
        this.is("animating") && this.onTransitionEnd(), animate && (this.enter("animating"), 
        this.trigger("translate")), $.support.transform3d && $.support.transition ? this.$stage.css({
            transform: "translate3d(" + coordinate + "px,0px,0px)",
            transition: this.speed() / 1e3 + "s"
        }) : animate ? this.$stage.animate({
            left: coordinate + "px"
        }, this.speed(), this.settings.fallbackEasing, $.proxy(this.onTransitionEnd, this)) : this.$stage.css({
            left: coordinate + "px"
        });
    }, Owl.prototype.is = function(state) {
        return this._states.current[state] && this._states.current[state] > 0;
    }, Owl.prototype.current = function(position) {
        if (void 0 === position) return this._current;
        if (0 !== this._items.length) {
            if (position = this.normalize(position), this._current !== position) {
                var event = this.trigger("change", {
                    property: {
                        name: "position",
                        value: position
                    }
                });
                void 0 !== event.data && (position = this.normalize(event.data)), this._current = position, 
                this.invalidate("position"), this.trigger("changed", {
                    property: {
                        name: "position",
                        value: this._current
                    }
                });
            }
            return this._current;
        }
    }, Owl.prototype.invalidate = function(part) {
        return "string" === $.type(part) && (this._invalidated[part] = !0, this.is("valid") && this.leave("valid")), 
        $.map(this._invalidated, function(v, i) {
            return i;
        });
    }, Owl.prototype.reset = function(position) {
        void 0 !== (position = this.normalize(position)) && (this._speed = 0, this._current = position, 
        this.suppress([ "translate", "translated" ]), this.animate(this.coordinates(position)), 
        this.release([ "translate", "translated" ]));
    }, Owl.prototype.normalize = function(position, relative) {
        var n = this._items.length, m = relative ? 0 : this._clones.length;
        return !this.isNumeric(position) || n < 1 ? position = void 0 : (position < 0 || position >= n + m) && (position = ((position - m / 2) % n + n) % n + m / 2), 
        position;
    }, Owl.prototype.relative = function(position) {
        return position -= this._clones.length / 2, this.normalize(position, !0);
    }, Owl.prototype.maximum = function(relative) {
        var iterator, reciprocalItemsWidth, elementWidth, settings = this.settings, maximum = this._coordinates.length;
        if (settings.loop) maximum = this._clones.length / 2 + this._items.length - 1; else if (settings.autoWidth || settings.merge) {
            for (iterator = this._items.length, reciprocalItemsWidth = this._items[--iterator].width(), 
            elementWidth = this.$element.width(); iterator-- && !((reciprocalItemsWidth += this._items[iterator].width() + this.settings.margin) > elementWidth); ) ;
            maximum = iterator + 1;
        } else maximum = settings.center ? this._items.length - 1 : this._items.length - settings.items;
        return relative && (maximum -= this._clones.length / 2), Math.max(maximum, 0);
    }, Owl.prototype.minimum = function(relative) {
        return relative ? 0 : this._clones.length / 2;
    }, Owl.prototype.items = function(position) {
        return void 0 === position ? this._items.slice() : (position = this.normalize(position, !0), 
        this._items[position]);
    }, Owl.prototype.mergers = function(position) {
        return void 0 === position ? this._mergers.slice() : (position = this.normalize(position, !0), 
        this._mergers[position]);
    }, Owl.prototype.clones = function(position) {
        var odd = this._clones.length / 2, even = odd + this._items.length, map = function(index) {
            return index % 2 == 0 ? even + index / 2 : odd - (index + 1) / 2;
        };
        return void 0 === position ? $.map(this._clones, function(v, i) {
            return map(i);
        }) : $.map(this._clones, function(v, i) {
            return v === position ? map(i) : null;
        });
    }, Owl.prototype.speed = function(speed) {
        return void 0 !== speed && (this._speed = speed), this._speed;
    }, Owl.prototype.coordinates = function(position) {
        var coordinate, multiplier = 1, newPosition = position - 1;
        return void 0 === position ? $.map(this._coordinates, $.proxy(function(coordinate, index) {
            return this.coordinates(index);
        }, this)) : (this.settings.center ? (this.settings.rtl && (multiplier = -1, newPosition = position + 1), 
        coordinate = this._coordinates[position], coordinate += (this.width() - coordinate + (this._coordinates[newPosition] || 0)) / 2 * multiplier) : coordinate = this._coordinates[newPosition] || 0, 
        coordinate = Math.ceil(coordinate));
    }, Owl.prototype.duration = function(from, to, factor) {
        return 0 === factor ? 0 : Math.min(Math.max(Math.abs(to - from), 1), 6) * Math.abs(factor || this.settings.smartSpeed);
    }, Owl.prototype.to = function(position, speed) {
        var current = this.current(), revert = null, distance = position - this.relative(current), direction = (distance > 0) - (distance < 0), items = this._items.length, minimum = this.minimum(), maximum = this.maximum();
        this.settings.loop ? (!this.settings.rewind && Math.abs(distance) > items / 2 && (distance += -1 * direction * items), 
        (revert = (((position = current + distance) - minimum) % items + items) % items + minimum) !== position && revert - distance <= maximum && revert - distance > 0 && (current = revert - distance, 
        position = revert, this.reset(current))) : position = this.settings.rewind ? (position % (maximum += 1) + maximum) % maximum : Math.max(minimum, Math.min(maximum, position)), 
        this.speed(this.duration(current, position, speed)), this.current(position), this.$element.is(":visible") && this.update();
    }, Owl.prototype.next = function(speed) {
        speed = speed || !1, this.to(this.relative(this.current()) + 1, speed);
    }, Owl.prototype.prev = function(speed) {
        speed = speed || !1, this.to(this.relative(this.current()) - 1, speed);
    }, Owl.prototype.onTransitionEnd = function(event) {
        if (void 0 !== event && (event.stopPropagation(), (event.target || event.srcElement || event.originalTarget) !== this.$stage.get(0))) return !1;
        this.leave("animating"), this.trigger("translated");
    }, Owl.prototype.viewport = function() {
        var width;
        return this.options.responsiveBaseElement !== window ? width = $(this.options.responsiveBaseElement).width() : window.innerWidth ? width = window.innerWidth : document.documentElement && document.documentElement.clientWidth ? width = document.documentElement.clientWidth : console.warn("Can not detect viewport width."), 
        width;
    }, Owl.prototype.replace = function(content) {
        this.$stage.empty(), this._items = [], content && (content = content instanceof jQuery ? content : $(content)), 
        this.settings.nestedItemSelector && (content = content.find("." + this.settings.nestedItemSelector)), 
        content.filter(function() {
            return 1 === this.nodeType;
        }).each($.proxy(function(index, item) {
            item = this.prepare(item), this.$stage.append(item), this._items.push(item), this._mergers.push(1 * item.find("[data-merge]").addBack("[data-merge]").attr("data-merge") || 1);
        }, this)), this.reset(this.isNumeric(this.settings.startPosition) ? this.settings.startPosition : 0), 
        this.invalidate("items");
    }, Owl.prototype.add = function(content, position) {
        var current = this.relative(this._current);
        position = void 0 === position ? this._items.length : this.normalize(position, !0), 
        content = content instanceof jQuery ? content : $(content), this.trigger("add", {
            content: content,
            position: position
        }), content = this.prepare(content), 0 === this._items.length || position === this._items.length ? (0 === this._items.length && this.$stage.append(content), 
        0 !== this._items.length && this._items[position - 1].after(content), this._items.push(content), 
        this._mergers.push(1 * content.find("[data-merge]").addBack("[data-merge]").attr("data-merge") || 1)) : (this._items[position].before(content), 
        this._items.splice(position, 0, content), this._mergers.splice(position, 0, 1 * content.find("[data-merge]").addBack("[data-merge]").attr("data-merge") || 1)), 
        this._items[current] && this.reset(this._items[current].index()), this.invalidate("items"), 
        this.trigger("added", {
            content: content,
            position: position
        });
    }, Owl.prototype.remove = function(position) {
        void 0 !== (position = this.normalize(position, !0)) && (this.trigger("remove", {
            content: this._items[position],
            position: position
        }), this._items[position].remove(), this._items.splice(position, 1), this._mergers.splice(position, 1), 
        this.invalidate("items"), this.trigger("removed", {
            content: null,
            position: position
        }));
    }, Owl.prototype.preloadAutoWidthImages = function(images) {
        images.each($.proxy(function(i, element) {
            this.enter("pre-loading"), element = $(element), $(new Image()).one("load", $.proxy(function(e) {
                element.attr("src", e.target.src), element.css("opacity", 1), this.leave("pre-loading"), 
                !this.is("pre-loading") && !this.is("initializing") && this.refresh();
            }, this)).attr("src", element.attr("src") || element.attr("data-src") || element.attr("data-src-retina"));
        }, this));
    }, Owl.prototype.destroy = function() {
        this.$element.off(".owl.core"), this.$stage.off(".owl.core"), $(document).off(".owl.core"), 
        !1 !== this.settings.responsive && (window.clearTimeout(this.resizeTimer), this.off(window, "resize", this._handlers.onThrottledResize));
        for (var i in this._plugins) this._plugins[i].destroy();
        this.$stage.children(".cloned").remove(), this.$stage.unwrap(), this.$stage.children().contents().unwrap(), 
        this.$stage.children().unwrap(), this.$element.removeClass(this.options.refreshClass).removeClass(this.options.loadingClass).removeClass(this.options.loadedClass).removeClass(this.options.rtlClass).removeClass(this.options.dragClass).removeClass(this.options.grabClass).attr("class", this.$element.attr("class").replace(new RegExp(this.options.responsiveClass + "-\\S+\\s", "g"), "")).removeData("owl.carousel");
    }, Owl.prototype.op = function(a, o, b) {
        var rtl = this.settings.rtl;
        switch (o) {
          case "<":
            return rtl ? a > b : a < b;

          case ">":
            return rtl ? a < b : a > b;

          case ">=":
            return rtl ? a <= b : a >= b;

          case "<=":
            return rtl ? a >= b : a <= b;
        }
    }, Owl.prototype.on = function(element, event, listener, capture) {
        element.addEventListener ? element.addEventListener(event, listener, capture) : element.attachEvent && element.attachEvent("on" + event, listener);
    }, Owl.prototype.off = function(element, event, listener, capture) {
        element.removeEventListener ? element.removeEventListener(event, listener, capture) : element.detachEvent && element.detachEvent("on" + event, listener);
    }, Owl.prototype.trigger = function(name, data, namespace, state, enter) {
        var status = {
            item: {
                count: this._items.length,
                index: this.current()
            }
        }, handler = $.camelCase($.grep([ "on", name, namespace ], function(v) {
            return v;
        }).join("-").toLowerCase()), event = $.Event([ name, "owl", namespace || "carousel" ].join(".").toLowerCase(), $.extend({
            relatedTarget: this
        }, status, data));
        return this._supress[name] || ($.each(this._plugins, function(name, plugin) {
            plugin.onTrigger && plugin.onTrigger(event);
        }), this.register({
            type: Owl.Type.Event,
            name: name
        }), this.$element.trigger(event), this.settings && "function" == typeof this.settings[handler] && this.settings[handler].call(this, event)), 
        event;
    }, Owl.prototype.enter = function(name) {
        $.each([ name ].concat(this._states.tags[name] || []), $.proxy(function(i, name) {
            void 0 === this._states.current[name] && (this._states.current[name] = 0), this._states.current[name]++;
        }, this));
    }, Owl.prototype.leave = function(name) {
        $.each([ name ].concat(this._states.tags[name] || []), $.proxy(function(i, name) {
            this._states.current[name]--;
        }, this));
    }, Owl.prototype.register = function(object) {
        if (object.type === Owl.Type.Event) {
            if ($.event.special[object.name] || ($.event.special[object.name] = {}), !$.event.special[object.name].owl) {
                var _default = $.event.special[object.name]._default;
                $.event.special[object.name]._default = function(e) {
                    return !_default || !_default.apply || e.namespace && -1 !== e.namespace.indexOf("owl") ? e.namespace && e.namespace.indexOf("owl") > -1 : _default.apply(this, arguments);
                }, $.event.special[object.name].owl = !0;
            }
        } else object.type === Owl.Type.State && (this._states.tags[object.name] ? this._states.tags[object.name] = this._states.tags[object.name].concat(object.tags) : this._states.tags[object.name] = object.tags, 
        this._states.tags[object.name] = $.grep(this._states.tags[object.name], $.proxy(function(tag, i) {
            return $.inArray(tag, this._states.tags[object.name]) === i;
        }, this)));
    }, Owl.prototype.suppress = function(events) {
        $.each(events, $.proxy(function(index, event) {
            this._supress[event] = !0;
        }, this));
    }, Owl.prototype.release = function(events) {
        $.each(events, $.proxy(function(index, event) {
            delete this._supress[event];
        }, this));
    }, Owl.prototype.pointer = function(event) {
        var result = {
            x: null,
            y: null
        };
        return event = event.originalEvent || event || window.event, event = event.touches && event.touches.length ? event.touches[0] : event.changedTouches && event.changedTouches.length ? event.changedTouches[0] : event, 
        event.pageX ? (result.x = event.pageX, result.y = event.pageY) : (result.x = event.clientX, 
        result.y = event.clientY), result;
    }, Owl.prototype.isNumeric = function(number) {
        return !isNaN(parseFloat(number));
    }, Owl.prototype.difference = function(first, second) {
        return {
            x: first.x - second.x,
            y: first.y - second.y
        };
    }, $.fn.owlCarousel = function(option) {
        var args = Array.prototype.slice.call(arguments, 1);
        return this.each(function() {
            var $this = $(this), data = $this.data("owl.carousel");
            data || (data = new Owl(this, "object" == typeof option && option), $this.data("owl.carousel", data), 
            $.each([ "next", "prev", "to", "destroy", "refresh", "replace", "add", "remove" ], function(i, event) {
                data.register({
                    type: Owl.Type.Event,
                    name: event
                }), data.$element.on(event + ".owl.carousel.core", $.proxy(function(e) {
                    e.namespace && e.relatedTarget !== this && (this.suppress([ event ]), data[event].apply(this, [].slice.call(arguments, 1)), 
                    this.release([ event ]));
                }, data));
            })), "string" == typeof option && "_" !== option.charAt(0) && data[option].apply(data, args);
        });
    }, $.fn.owlCarousel.Constructor = Owl;
}(window.Zepto || window.jQuery, window, document), function($, window, document, undefined) {
    var AutoRefresh = function(carousel) {
        this._core = carousel, this._interval = null, this._visible = null, this._handlers = {
            "initialized.owl.carousel": $.proxy(function(e) {
                e.namespace && this._core.settings.autoRefresh && this.watch();
            }, this)
        }, this._core.options = $.extend({}, AutoRefresh.Defaults, this._core.options), 
        this._core.$element.on(this._handlers);
    };
    AutoRefresh.Defaults = {
        autoRefresh: !0,
        autoRefreshInterval: 500
    }, AutoRefresh.prototype.watch = function() {
        this._interval || (this._visible = this._core.$element.is(":visible"), this._interval = window.setInterval($.proxy(this.refresh, this), this._core.settings.autoRefreshInterval));
    }, AutoRefresh.prototype.refresh = function() {
        this._core.$element.is(":visible") !== this._visible && (this._visible = !this._visible, 
        this._core.$element.toggleClass("owl-hidden", !this._visible), this._visible && this._core.invalidate("width") && this._core.refresh());
    }, AutoRefresh.prototype.destroy = function() {
        var handler, property;
        window.clearInterval(this._interval);
        for (handler in this._handlers) this._core.$element.off(handler, this._handlers[handler]);
        for (property in Object.getOwnPropertyNames(this)) "function" != typeof this[property] && (this[property] = null);
    }, $.fn.owlCarousel.Constructor.Plugins.AutoRefresh = AutoRefresh;
}(window.Zepto || window.jQuery, window, document), function($, window, document, undefined) {
    var Lazy = function(carousel) {
        this._core = carousel, this._loaded = [], this._handlers = {
            "initialized.owl.carousel change.owl.carousel resized.owl.carousel": $.proxy(function(e) {
                if (e.namespace && this._core.settings && this._core.settings.lazyLoad && (e.property && "position" == e.property.name || "initialized" == e.type)) for (var settings = this._core.settings, n = settings.center && Math.ceil(settings.items / 2) || settings.items, i = settings.center && -1 * n || 0, position = (e.property && void 0 !== e.property.value ? e.property.value : this._core.current()) + i, clones = this._core.clones().length, load = $.proxy(function(i, v) {
                    this.load(v);
                }, this); i++ < n; ) this.load(clones / 2 + this._core.relative(position)), clones && $.each(this._core.clones(this._core.relative(position)), load), 
                position++;
            }, this)
        }, this._core.options = $.extend({}, Lazy.Defaults, this._core.options), this._core.$element.on(this._handlers);
    };
    Lazy.Defaults = {
        lazyLoad: !1
    }, Lazy.prototype.load = function(position) {
        var $item = this._core.$stage.children().eq(position), $elements = $item && $item.find(".owl-lazy");
        !$elements || $.inArray($item.get(0), this._loaded) > -1 || ($elements.each($.proxy(function(index, element) {
            var image, $element = $(element), url = window.devicePixelRatio > 1 && $element.attr("data-src-retina") || $element.attr("data-src");
            this._core.trigger("load", {
                element: $element,
                url: url
            }, "lazy"), $element.is("img") ? $element.one("load.owl.lazy", $.proxy(function() {
                $element.css("opacity", 1), this._core.trigger("loaded", {
                    element: $element,
                    url: url
                }, "lazy");
            }, this)).attr("src", url) : ((image = new Image()).onload = $.proxy(function() {
                $element.css({
                    "background-image": 'url("' + url + '")',
                    opacity: "1"
                }), this._core.trigger("loaded", {
                    element: $element,
                    url: url
                }, "lazy");
            }, this), image.src = url);
        }, this)), this._loaded.push($item.get(0)));
    }, Lazy.prototype.destroy = function() {
        var handler, property;
        for (handler in this.handlers) this._core.$element.off(handler, this.handlers[handler]);
        for (property in Object.getOwnPropertyNames(this)) "function" != typeof this[property] && (this[property] = null);
    }, $.fn.owlCarousel.Constructor.Plugins.Lazy = Lazy;
}(window.Zepto || window.jQuery, window, document), function($, window, document, undefined) {
    var AutoHeight = function(carousel) {
        this._core = carousel, this._handlers = {
            "initialized.owl.carousel refreshed.owl.carousel": $.proxy(function(e) {
                e.namespace && this._core.settings.autoHeight && this.update();
            }, this),
            "changed.owl.carousel": $.proxy(function(e) {
                e.namespace && this._core.settings.autoHeight && "position" == e.property.name && this.update();
            }, this),
            "loaded.owl.lazy": $.proxy(function(e) {
                e.namespace && this._core.settings.autoHeight && e.element.closest("." + this._core.settings.itemClass).index() === this._core.current() && this.update();
            }, this)
        }, this._core.options = $.extend({}, AutoHeight.Defaults, this._core.options), this._core.$element.on(this._handlers);
    };
    AutoHeight.Defaults = {
        autoHeight: !1,
        autoHeightClass: "owl-height"
    }, AutoHeight.prototype.update = function() {
        var start = this._core._current, end = start + this._core.settings.items, visible = this._core.$stage.children().toArray().slice(start, end), heights = [], maxheight = 0;
        $.each(visible, function(index, item) {
            heights.push($(item).height());
        }), maxheight = Math.max.apply(null, heights), this._core.$stage.parent().height(maxheight).addClass(this._core.settings.autoHeightClass);
    }, AutoHeight.prototype.destroy = function() {
        var handler, property;
        for (handler in this._handlers) this._core.$element.off(handler, this._handlers[handler]);
        for (property in Object.getOwnPropertyNames(this)) "function" != typeof this[property] && (this[property] = null);
    }, $.fn.owlCarousel.Constructor.Plugins.AutoHeight = AutoHeight;
}(window.Zepto || window.jQuery, window, document), function($, window, document, undefined) {
    var Video = function(carousel) {
        this._core = carousel, this._videos = {}, this._playing = null, this._handlers = {
            "initialized.owl.carousel": $.proxy(function(e) {
                e.namespace && this._core.register({
                    type: "state",
                    name: "playing",
                    tags: [ "interacting" ]
                });
            }, this),
            "resize.owl.carousel": $.proxy(function(e) {
                e.namespace && this._core.settings.video && this.isInFullScreen() && e.preventDefault();
            }, this),
            "refreshed.owl.carousel": $.proxy(function(e) {
                e.namespace && this._core.is("resizing") && this._core.$stage.find(".cloned .owl-video-frame").remove();
            }, this),
            "changed.owl.carousel": $.proxy(function(e) {
                e.namespace && "position" === e.property.name && this._playing && this.stop();
            }, this),
            "prepared.owl.carousel": $.proxy(function(e) {
                if (e.namespace) {
                    var $element = $(e.content).find(".owl-video");
                    $element.length && ($element.css("display", "none"), this.fetch($element, $(e.content)));
                }
            }, this)
        }, this._core.options = $.extend({}, Video.Defaults, this._core.options), this._core.$element.on(this._handlers), 
        this._core.$element.on("click.owl.video", ".owl-video-play-icon", $.proxy(function(e) {
            this.play(e);
        }, this));
    };
    Video.Defaults = {
        video: !1,
        videoHeight: !1,
        videoWidth: !1
    }, Video.prototype.fetch = function(target, item) {
        var type = function() {
            return target.attr("data-vimeo-id") ? "vimeo" : target.attr("data-vzaar-id") ? "vzaar" : "youtube";
        }(), id = target.attr("data-vimeo-id") || target.attr("data-youtube-id") || target.attr("data-vzaar-id"), width = target.attr("data-width") || this._core.settings.videoWidth, height = target.attr("data-height") || this._core.settings.videoHeight, url = target.attr("href");
        if (!url) throw new Error("Missing video URL.");
        if ((id = url.match(/(http:|https:|)\/\/(player.|www.|app.)?(vimeo\.com|youtu(be\.com|\.be|be\.googleapis\.com)|vzaar\.com)\/(video\/|videos\/|embed\/|channels\/.+\/|groups\/.+\/|watch\?v=|v\/)?([A-Za-z0-9._%-]*)(\&\S+)?/))[3].indexOf("youtu") > -1) type = "youtube"; else if (id[3].indexOf("vimeo") > -1) type = "vimeo"; else {
            if (!(id[3].indexOf("vzaar") > -1)) throw new Error("Video URL not supported.");
            type = "vzaar";
        }
        id = id[6], this._videos[url] = {
            type: type,
            id: id,
            width: width,
            height: height
        }, item.attr("data-video", url), this.thumbnail(target, this._videos[url]);
    }, Video.prototype.thumbnail = function(target, video) {
        var tnLink, icon, path, dimensions = video.width && video.height ? 'style="width:' + video.width + "px;height:" + video.height + 'px;"' : "", customTn = target.find("img"), srcType = "src", lazyClass = "", settings = this._core.settings, create = function(path) {
            icon = '<div class="owl-video-play-icon"></div>', tnLink = settings.lazyLoad ? '<div class="owl-video-tn ' + lazyClass + '" ' + srcType + '="' + path + '"></div>' : '<div class="owl-video-tn" style="opacity:1;background-image:url(' + path + ')"></div>', 
            target.after(tnLink), target.after(icon);
        };
        if (target.wrap('<div class="owl-video-wrapper"' + dimensions + "></div>"), this._core.settings.lazyLoad && (srcType = "data-src", 
        lazyClass = "owl-lazy"), customTn.length) return create(customTn.attr(srcType)), 
        customTn.remove(), !1;
        "youtube" === video.type ? (path = "//img.youtube.com/vi/" + video.id + "/hqdefault.jpg", 
        create(path)) : "vimeo" === video.type ? $.ajax({
            type: "GET",
            url: "//vimeo.com/api/v2/video/" + video.id + ".json",
            jsonp: "callback",
            dataType: "jsonp",
            success: function(data) {
                path = data[0].thumbnail_large, create(path);
            }
        }) : "vzaar" === video.type && $.ajax({
            type: "GET",
            url: "//vzaar.com/api/videos/" + video.id + ".json",
            jsonp: "callback",
            dataType: "jsonp",
            success: function(data) {
                path = data.framegrab_url, create(path);
            }
        });
    }, Video.prototype.stop = function() {
        this._core.trigger("stop", null, "video"), this._playing.find(".owl-video-frame").remove(), 
        this._playing.removeClass("owl-video-playing"), this._playing = null, this._core.leave("playing"), 
        this._core.trigger("stopped", null, "video");
    }, Video.prototype.play = function(event) {
        var html, item = $(event.target).closest("." + this._core.settings.itemClass), video = this._videos[item.attr("data-video")], width = video.width || "100%", height = video.height || this._core.$stage.height();
        this._playing || (this._core.enter("playing"), this._core.trigger("play", null, "video"), 
        item = this._core.items(this._core.relative(item.index())), this._core.reset(item.index()), 
        "youtube" === video.type ? html = '<iframe width="' + width + '" height="' + height + '" src="//www.youtube.com/embed/' + video.id + "?autoplay=1&rel=0&v=" + video.id + '" frameborder="0" allowfullscreen></iframe>' : "vimeo" === video.type ? html = '<iframe src="//player.vimeo.com/video/' + video.id + '?autoplay=1" width="' + width + '" height="' + height + '" frameborder="0" webkitallowfullscreen mozallowfullscreen allowfullscreen></iframe>' : "vzaar" === video.type && (html = '<iframe frameborder="0"height="' + height + '"width="' + width + '" allowfullscreen mozallowfullscreen webkitAllowFullScreen src="//view.vzaar.com/' + video.id + '/player?autoplay=true"></iframe>'), 
        $('<div class="owl-video-frame">' + html + "</div>").insertAfter(item.find(".owl-video")), 
        this._playing = item.addClass("owl-video-playing"));
    }, Video.prototype.isInFullScreen = function() {
        var element = document.fullscreenElement || document.mozFullScreenElement || document.webkitFullscreenElement;
        return element && $(element).parent().hasClass("owl-video-frame");
    }, Video.prototype.destroy = function() {
        var handler, property;
        this._core.$element.off("click.owl.video");
        for (handler in this._handlers) this._core.$element.off(handler, this._handlers[handler]);
        for (property in Object.getOwnPropertyNames(this)) "function" != typeof this[property] && (this[property] = null);
    }, $.fn.owlCarousel.Constructor.Plugins.Video = Video;
}(window.Zepto || window.jQuery, window, document), function($, window, document, undefined) {
    var Animate = function(scope) {
        this.core = scope, this.core.options = $.extend({}, Animate.Defaults, this.core.options), 
        this.swapping = !0, this.previous = void 0, this.next = void 0, this.handlers = {
            "change.owl.carousel": $.proxy(function(e) {
                e.namespace && "position" == e.property.name && (this.previous = this.core.current(), 
                this.next = e.property.value);
            }, this),
            "drag.owl.carousel dragged.owl.carousel translated.owl.carousel": $.proxy(function(e) {
                e.namespace && (this.swapping = "translated" == e.type);
            }, this),
            "translate.owl.carousel": $.proxy(function(e) {
                e.namespace && this.swapping && (this.core.options.animateOut || this.core.options.animateIn) && this.swap();
            }, this)
        }, this.core.$element.on(this.handlers);
    };
    Animate.Defaults = {
        animateOut: !1,
        animateIn: !1
    }, Animate.prototype.swap = function() {
        if (1 === this.core.settings.items && $.support.animation && $.support.transition) {
            this.core.speed(0);
            var left, clear = $.proxy(this.clear, this), previous = this.core.$stage.children().eq(this.previous), next = this.core.$stage.children().eq(this.next), incoming = this.core.settings.animateIn, outgoing = this.core.settings.animateOut;
            this.core.current() !== this.previous && (outgoing && (left = this.core.coordinates(this.previous) - this.core.coordinates(this.next), 
            previous.one($.support.animation.end, clear).css({
                left: left + "px"
            }).addClass("animated owl-animated-out").addClass(outgoing)), incoming && next.one($.support.animation.end, clear).addClass("animated owl-animated-in").addClass(incoming));
        }
    }, Animate.prototype.clear = function(e) {
        $(e.target).css({
            left: ""
        }).removeClass("animated owl-animated-out owl-animated-in").removeClass(this.core.settings.animateIn).removeClass(this.core.settings.animateOut), 
        this.core.onTransitionEnd();
    }, Animate.prototype.destroy = function() {
        var handler, property;
        for (handler in this.handlers) this.core.$element.off(handler, this.handlers[handler]);
        for (property in Object.getOwnPropertyNames(this)) "function" != typeof this[property] && (this[property] = null);
    }, $.fn.owlCarousel.Constructor.Plugins.Animate = Animate;
}(window.Zepto || window.jQuery, window, document), function($, window, document, undefined) {
    var Autoplay = function(carousel) {
        this._core = carousel, this._timeout = null, this._paused = !1, this._handlers = {
            "changed.owl.carousel": $.proxy(function(e) {
                e.namespace && "settings" === e.property.name ? this._core.settings.autoplay ? this.play() : this.stop() : e.namespace && "position" === e.property.name && this._core.settings.autoplay && this._setAutoPlayInterval();
            }, this),
            "initialized.owl.carousel": $.proxy(function(e) {
                e.namespace && this._core.settings.autoplay && this.play();
            }, this),
            "play.owl.autoplay": $.proxy(function(e, t, s) {
                e.namespace && this.play(t, s);
            }, this),
            "stop.owl.autoplay": $.proxy(function(e) {
                e.namespace && this.stop();
            }, this),
            "mouseover.owl.autoplay": $.proxy(function() {
                this._core.settings.autoplayHoverPause && this._core.is("rotating") && this.pause();
            }, this),
            "mouseleave.owl.autoplay": $.proxy(function() {
                this._core.settings.autoplayHoverPause && this._core.is("rotating") && this.play();
            }, this),
            "touchstart.owl.core": $.proxy(function() {
                this._core.settings.autoplayHoverPause && this._core.is("rotating") && this.pause();
            }, this),
            "touchend.owl.core": $.proxy(function() {
                this._core.settings.autoplayHoverPause && this.play();
            }, this)
        }, this._core.$element.on(this._handlers), this._core.options = $.extend({}, Autoplay.Defaults, this._core.options);
    };
    Autoplay.Defaults = {
        autoplay: !1,
        autoplayTimeout: 5e3,
        autoplayHoverPause: !1,
        autoplaySpeed: !1
    }, Autoplay.prototype.play = function(timeout, speed) {
        this._paused = !1, this._core.is("rotating") || (this._core.enter("rotating"), this._setAutoPlayInterval());
    }, Autoplay.prototype._getNextTimeout = function(timeout, speed) {
        return this._timeout && window.clearTimeout(this._timeout), window.setTimeout($.proxy(function() {
            this._paused || this._core.is("busy") || this._core.is("interacting") || document.hidden || this._core.next(speed || this._core.settings.autoplaySpeed);
        }, this), timeout || this._core.settings.autoplayTimeout);
    }, Autoplay.prototype._setAutoPlayInterval = function() {
        this._timeout = this._getNextTimeout();
    }, Autoplay.prototype.stop = function() {
        this._core.is("rotating") && (window.clearTimeout(this._timeout), this._core.leave("rotating"));
    }, Autoplay.prototype.pause = function() {
        this._core.is("rotating") && (this._paused = !0);
    }, Autoplay.prototype.destroy = function() {
        var handler, property;
        this.stop();
        for (handler in this._handlers) this._core.$element.off(handler, this._handlers[handler]);
        for (property in Object.getOwnPropertyNames(this)) "function" != typeof this[property] && (this[property] = null);
    }, $.fn.owlCarousel.Constructor.Plugins.autoplay = Autoplay;
}(window.Zepto || window.jQuery, window, document), function($, window, document, undefined) {
    "use strict";
    var Navigation = function(carousel) {
        this._core = carousel, this._initialized = !1, this._pages = [], this._controls = {}, 
        this._templates = [], this.$element = this._core.$element, this._overrides = {
            next: this._core.next,
            prev: this._core.prev,
            to: this._core.to
        }, this._handlers = {
            "prepared.owl.carousel": $.proxy(function(e) {
                e.namespace && this._core.settings.dotsData && this._templates.push('<div class="' + this._core.settings.dotClass + '">' + $(e.content).find("[data-dot]").addBack("[data-dot]").attr("data-dot") + "</div>");
            }, this),
            "added.owl.carousel": $.proxy(function(e) {
                e.namespace && this._core.settings.dotsData && this._templates.splice(e.position, 0, this._templates.pop());
            }, this),
            "remove.owl.carousel": $.proxy(function(e) {
                e.namespace && this._core.settings.dotsData && this._templates.splice(e.position, 1);
            }, this),
            "changed.owl.carousel": $.proxy(function(e) {
                e.namespace && "position" == e.property.name && this.draw();
            }, this),
            "initialized.owl.carousel": $.proxy(function(e) {
                e.namespace && !this._initialized && (this._core.trigger("initialize", null, "navigation"), 
                this.initialize(), this.update(), this.draw(), this._initialized = !0, this._core.trigger("initialized", null, "navigation"));
            }, this),
            "refreshed.owl.carousel": $.proxy(function(e) {
                e.namespace && this._initialized && (this._core.trigger("refresh", null, "navigation"), 
                this.update(), this.draw(), this._core.trigger("refreshed", null, "navigation"));
            }, this)
        }, this._core.options = $.extend({}, Navigation.Defaults, this._core.options), this.$element.on(this._handlers);
    };
    Navigation.Defaults = {
        nav: !1,
        navText: [ "prev", "next" ],
        navSpeed: !1,
        navElement: "div",
        navContainer: !1,
        navContainerClass: "owl-nav",
        navClass: [ "owl-prev", "owl-next" ],
        slideBy: 1,
        dotClass: "owl-dot",
        dotsClass: "owl-dots",
        dots: !0,
        dotsEach: !1,
        dotsData: !1,
        dotsSpeed: !1,
        dotsContainer: !1
    }, Navigation.prototype.initialize = function() {
        var override, settings = this._core.settings;
        this._controls.$relative = (settings.navContainer ? $(settings.navContainer) : $("<div>").addClass(settings.navContainerClass).appendTo(this.$element)).addClass("disabled"), 
        this._controls.$previous = $("<" + settings.navElement + ">").addClass(settings.navClass[0]).html(settings.navText[0]).prependTo(this._controls.$relative).on("click", $.proxy(function(e) {
            this.prev(settings.navSpeed);
        }, this)), this._controls.$next = $("<" + settings.navElement + ">").addClass(settings.navClass[1]).html(settings.navText[1]).appendTo(this._controls.$relative).on("click", $.proxy(function(e) {
            this.next(settings.navSpeed);
        }, this)), settings.dotsData || (this._templates = [ $("<div>").addClass(settings.dotClass).append($("<span>")).prop("outerHTML") ]), 
        this._controls.$absolute = (settings.dotsContainer ? $(settings.dotsContainer) : $("<div>").addClass(settings.dotsClass).appendTo(this.$element)).addClass("disabled"), 
        this._controls.$absolute.on("click", "div", $.proxy(function(e) {
            var index = $(e.target).parent().is(this._controls.$absolute) ? $(e.target).index() : $(e.target).parent().index();
            e.preventDefault(), this.to(index, settings.dotsSpeed);
        }, this));
        for (override in this._overrides) this._core[override] = $.proxy(this[override], this);
    }, Navigation.prototype.destroy = function() {
        var handler, control, property, override;
        for (handler in this._handlers) this.$element.off(handler, this._handlers[handler]);
        for (control in this._controls) this._controls[control].remove();
        for (override in this.overides) this._core[override] = this._overrides[override];
        for (property in Object.getOwnPropertyNames(this)) "function" != typeof this[property] && (this[property] = null);
    }, Navigation.prototype.update = function() {
        var i, j, k, lower = this._core.clones().length / 2, upper = lower + this._core.items().length, maximum = this._core.maximum(!0), settings = this._core.settings, size = settings.center || settings.autoWidth || settings.dotsData ? 1 : settings.dotsEach || settings.items;
        if ("page" !== settings.slideBy && (settings.slideBy = Math.min(settings.slideBy, settings.items)), 
        settings.dots || "page" == settings.slideBy) for (this._pages = [], i = lower, j = 0, 
        k = 0; i < upper; i++) {
            if (j >= size || 0 === j) {
                if (this._pages.push({
                    start: Math.min(maximum, i - lower),
                    end: i - lower + size - 1
                }), Math.min(maximum, i - lower) === maximum) break;
                j = 0, ++k;
            }
            j += this._core.mergers(this._core.relative(i));
        }
    }, Navigation.prototype.draw = function() {
        var difference, settings = this._core.settings, disabled = this._core.items().length <= settings.items, index = this._core.relative(this._core.current()), loop = settings.loop || settings.rewind;
        this._controls.$relative.toggleClass("disabled", !settings.nav || disabled), settings.nav && (this._controls.$previous.toggleClass("disabled", !loop && index <= this._core.minimum(!0)), 
        this._controls.$next.toggleClass("disabled", !loop && index >= this._core.maximum(!0))), 
        this._controls.$absolute.toggleClass("disabled", !settings.dots || disabled), settings.dots && (difference = this._pages.length - this._controls.$absolute.children().length, 
        settings.dotsData && 0 !== difference ? this._controls.$absolute.html(this._templates.join("")) : difference > 0 ? this._controls.$absolute.append(new Array(difference + 1).join(this._templates[0])) : difference < 0 && this._controls.$absolute.children().slice(difference).remove(), 
        this._controls.$absolute.find(".active").removeClass("active"), this._controls.$absolute.children().eq($.inArray(this.current(), this._pages)).addClass("active"));
    }, Navigation.prototype.onTrigger = function(event) {
        var settings = this._core.settings;
        event.page = {
            index: $.inArray(this.current(), this._pages),
            count: this._pages.length,
            size: settings && (settings.center || settings.autoWidth || settings.dotsData ? 1 : settings.dotsEach || settings.items)
        };
    }, Navigation.prototype.current = function() {
        var current = this._core.relative(this._core.current());
        return $.grep(this._pages, $.proxy(function(page, index) {
            return page.start <= current && page.end >= current;
        }, this)).pop();
    }, Navigation.prototype.getPosition = function(successor) {
        var position, length, settings = this._core.settings;
        return "page" == settings.slideBy ? (position = $.inArray(this.current(), this._pages), 
        length = this._pages.length, successor ? ++position : --position, position = this._pages[(position % length + length) % length].start) : (position = this._core.relative(this._core.current()), 
        length = this._core.items().length, successor ? position += settings.slideBy : position -= settings.slideBy), 
        position;
    }, Navigation.prototype.next = function(speed) {
        $.proxy(this._overrides.to, this._core)(this.getPosition(!0), speed);
    }, Navigation.prototype.prev = function(speed) {
        $.proxy(this._overrides.to, this._core)(this.getPosition(!1), speed);
    }, Navigation.prototype.to = function(position, speed, standard) {
        var length;
        !standard && this._pages.length ? (length = this._pages.length, $.proxy(this._overrides.to, this._core)(this._pages[(position % length + length) % length].start, speed)) : $.proxy(this._overrides.to, this._core)(position, speed);
    }, $.fn.owlCarousel.Constructor.Plugins.Navigation = Navigation;
}(window.Zepto || window.jQuery, window, document), function($, window, document, undefined) {
    "use strict";
    var Hash = function(carousel) {
        this._core = carousel, this._hashes = {}, this.$element = this._core.$element, this._handlers = {
            "initialized.owl.carousel": $.proxy(function(e) {
                e.namespace && "URLHash" === this._core.settings.startPosition && $(window).trigger("hashchange.owl.navigation");
            }, this),
            "prepared.owl.carousel": $.proxy(function(e) {
                if (e.namespace) {
                    var hash = $(e.content).find("[data-hash]").addBack("[data-hash]").attr("data-hash");
                    if (!hash) return;
                    this._hashes[hash] = e.content;
                }
            }, this),
            "changed.owl.carousel": $.proxy(function(e) {
                if (e.namespace && "position" === e.property.name) {
                    var current = this._core.items(this._core.relative(this._core.current())), hash = $.map(this._hashes, function(item, hash) {
                        return item === current ? hash : null;
                    }).join();
                    if (!hash || window.location.hash.slice(1) === hash) return;
                    window.location.hash = hash;
                }
            }, this)
        }, this._core.options = $.extend({}, Hash.Defaults, this._core.options), this.$element.on(this._handlers), 
        $(window).on("hashchange.owl.navigation", $.proxy(function(e) {
            var hash = window.location.hash.substring(1), items = this._core.$stage.children(), position = this._hashes[hash] && items.index(this._hashes[hash]);
            void 0 !== position && position !== this._core.current() && this._core.to(this._core.relative(position), !1, !0);
        }, this));
    };
    Hash.Defaults = {
        URLhashListener: !1
    }, Hash.prototype.destroy = function() {
        var handler, property;
        $(window).off("hashchange.owl.navigation");
        for (handler in this._handlers) this._core.$element.off(handler, this._handlers[handler]);
        for (property in Object.getOwnPropertyNames(this)) "function" != typeof this[property] && (this[property] = null);
    }, $.fn.owlCarousel.Constructor.Plugins.Hash = Hash;
}(window.Zepto || window.jQuery, window, document), function($, window, document, undefined) {
    function test(property, prefixed) {
        var result = !1, upper = property.charAt(0).toUpperCase() + property.slice(1);
        return $.each((property + " " + prefixes.join(upper + " ") + upper).split(" "), function(i, property) {
            if (style[property] !== undefined) return result = !prefixed || property, !1;
        }), result;
    }
    function prefixed(property) {
        return test(property, !0);
    }
    var style = $("<support>").get(0).style, prefixes = "Webkit Moz O ms".split(" "), events = {
        transition: {
            end: {
                WebkitTransition: "webkitTransitionEnd",
                MozTransition: "transitionend",
                OTransition: "oTransitionEnd",
                transition: "transitionend"
            }
        },
        animation: {
            end: {
                WebkitAnimation: "webkitAnimationEnd",
                MozAnimation: "animationend",
                OAnimation: "oAnimationEnd",
                animation: "animationend"
            }
        }
    }, tests = {
        csstransforms: function() {
            return !!test("transform");
        },
        csstransforms3d: function() {
            return !!test("perspective");
        },
        csstransitions: function() {
            return !!test("transition");
        },
        cssanimations: function() {
            return !!test("animation");
        }
    };
    tests.csstransitions() && ($.support.transition = new String(prefixed("transition")), 
    $.support.transition.end = events.transition.end[$.support.transition]), tests.cssanimations() && ($.support.animation = new String(prefixed("animation")), 
    $.support.animation.end = events.animation.end[$.support.animation]), tests.csstransforms() && ($.support.transform = new String(prefixed("transform")), 
    $.support.transform3d = tests.csstransforms3d());
}(window.Zepto || window.jQuery, window, document), function($, window, document, undefined) {
    "use strict";
    var Thumbs = function(carousel) {
        this.owl = carousel, this._thumbcontent = [], this._identifier = 0, this.owl_currentitem = this.owl.options.startPosition, 
        this.$element = this.owl.$element, this._handlers = {
            "prepared.owl.carousel": $.proxy(function(e) {
                if (!e.namespace || !this.owl.options.thumbs || this.owl.options.thumbImage || this.owl.options.thumbsPrerendered || this.owl.options.thumbImage) {
                    if (e.namespace && this.owl.options.thumbs && this.owl.options.thumbImage) {
                        var innerImage = $(e.content).find("img");
                        this._thumbcontent.push(innerImage);
                    }
                } else void 0 !== $(e.content).find("[data-thumb]").attr("data-thumb") && this._thumbcontent.push($(e.content).find("[data-thumb]").attr("data-thumb"));
            }, this),
            "initialized.owl.carousel": $.proxy(function(e) {
                e.namespace && this.owl.options.thumbs && (this.render(), this.listen(), this._identifier = this.owl.$element.data("slider-id"), 
                this.setActive());
            }, this),
            "changed.owl.carousel": $.proxy(function(e) {
                e.namespace && "position" === e.property.name && this.owl.options.thumbs && (this._identifier = this.owl.$element.data("slider-id"), 
                this.setActive());
            }, this)
        }, this.owl.options = $.extend({}, Thumbs.Defaults, this.owl.options), this.owl.$element.on(this._handlers);
    };
    Thumbs.Defaults = {
        thumbs: !0,
        thumbImage: !1,
        thumbContainerClass: "owl-thumbs",
        thumbItemClass: "owl-thumb-item",
        moveThumbsInside: !1
    }, Thumbs.prototype.listen = function() {
        var options = this.owl.options;
        options.thumbsPrerendered && (this._thumbcontent._thumbcontainer = $("." + options.thumbContainerClass)), 
        $(this._thumbcontent._thumbcontainer).on("click", this._thumbcontent._thumbcontainer.children(), $.proxy(function(e) {
            this._identifier = $(e.target).closest("." + options.thumbContainerClass).data("slider-id");
            var index = $(e.target).parent().is(this._thumbcontent._thumbcontainer) ? $(e.target).index() : $(e.target).closest("." + options.thumbItemClass).index();
            options.thumbsPrerendered ? $("[data-slider-id=" + this._identifier + "]").trigger("to.owl.carousel", [ index, options.dotsSpeed, !0 ]) : this.owl.to(index, options.dotsSpeed), 
            e.preventDefault();
        }, this));
    }, Thumbs.prototype.render = function() {
        var options = this.owl.options;
        options.thumbsPrerendered ? (this._thumbcontent._thumbcontainer = $("." + options.thumbContainerClass), 
        options.moveThumbsInside && this._thumbcontent._thumbcontainer.appendTo(this.$element)) : this._thumbcontent._thumbcontainer = $("<div>").addClass(options.thumbContainerClass).appendTo(this.$element);
        var i;
        if (options.thumbImage) for (i = 0; i < this._thumbcontent.length; ++i) this._thumbcontent._thumbcontainer.append("<button class=" + options.thumbItemClass + '><img src="' + this._thumbcontent[i].attr("src") + '" alt="' + this._thumbcontent[i].attr("alt") + '" /></button>'); else for (i = 0; i < this._thumbcontent.length; ++i) this._thumbcontent._thumbcontainer.append("<button class=" + options.thumbItemClass + ">" + this._thumbcontent[i] + "</button>");
    }, Thumbs.prototype.setActive = function() {
        this.owl_currentitem = this.owl._current - this.owl._clones.length / 2, this.owl_currentitem === this.owl._items.length && (this.owl_currentitem = 0);
        var options = this.owl.options, thumbContainer = options.thumbsPrerendered ? $("." + options.thumbContainerClass + '[data-slider-id="' + this._identifier + '"]') : this._thumbcontent._thumbcontainer;
        thumbContainer.children().filter(".active").removeClass("active"), thumbContainer.children().eq(this.owl_currentitem).addClass("active");
    }, Thumbs.prototype.destroy = function() {
        var handler, property;
        for (handler in this._handlers) this.owl.$element.off(handler, this._handlers[handler]);
        for (property in Object.getOwnPropertyNames(this)) "function" != typeof this[property] && (this[property] = null);
    }, $.fn.owlCarousel.Constructor.Plugins.Thumbs = Thumbs;
}(window.Zepto || window.jQuery, window, document), function(factory) {
    "function" == typeof define && define.amd ? define([ "jquery" ], factory) : "object" == typeof module && module.exports ? module.exports = factory(require("jquery")) : factory(jQuery);
}(function($) {
    $.extend($.fn, {
        validate: function(options) {
            if (this.length) {
                var validator = $.data(this[0], "validator");
                return validator || (this.attr("novalidate", "novalidate"), validator = new $.validator(options, this[0]), 
                $.data(this[0], "validator", validator), validator.settings.onsubmit && (this.on("click.validate", ":submit", function(event) {
                    validator.settings.submitHandler && (validator.submitButton = event.target), $(this).hasClass("cancel") && (validator.cancelSubmit = !0), 
                    void 0 !== $(this).attr("formnovalidate") && (validator.cancelSubmit = !0);
                }), this.on("submit.validate", function(event) {
                    function handle() {
                        var hidden, result;
                        return !validator.settings.submitHandler || (validator.submitButton && (hidden = $("<input type='hidden'/>").attr("name", validator.submitButton.name).val($(validator.submitButton).val()).appendTo(validator.currentForm)), 
                        result = validator.settings.submitHandler.call(validator, validator.currentForm, event), 
                        validator.submitButton && hidden.remove(), void 0 !== result && result);
                    }
                    return validator.settings.debug && event.preventDefault(), validator.cancelSubmit ? (validator.cancelSubmit = !1, 
                    handle()) : validator.form() ? validator.pendingRequest ? (validator.formSubmitted = !0, 
                    !1) : handle() : (validator.focusInvalid(), !1);
                })), validator);
            }
            options && options.debug && window.console && console.warn("Nothing selected, can't validate, returning nothing.");
        },
        valid: function() {
            var valid, validator, errorList;
            return $(this[0]).is("form") ? valid = this.validate().form() : (errorList = [], 
            valid = !0, validator = $(this[0].form).validate(), this.each(function() {
                (valid = validator.element(this) && valid) || (errorList = errorList.concat(validator.errorList));
            }), validator.errorList = errorList), valid;
        },
        rules: function(command, argument) {
            var settings, staticRules, existingRules, data, param, filtered, element = this[0];
            if (null != element && null != element.form) {
                if (command) switch (settings = $.data(element.form, "validator").settings, staticRules = settings.rules, 
                existingRules = $.validator.staticRules(element), command) {
                  case "add":
                    $.extend(existingRules, $.validator.normalizeRule(argument)), delete existingRules.messages, 
                    staticRules[element.name] = existingRules, argument.messages && (settings.messages[element.name] = $.extend(settings.messages[element.name], argument.messages));
                    break;

                  case "remove":
                    return argument ? (filtered = {}, $.each(argument.split(/\s/), function(index, method) {
                        filtered[method] = existingRules[method], delete existingRules[method], "required" === method && $(element).removeAttr("aria-required");
                    }), filtered) : (delete staticRules[element.name], existingRules);
                }
                return (data = $.validator.normalizeRules($.extend({}, $.validator.classRules(element), $.validator.attributeRules(element), $.validator.dataRules(element), $.validator.staticRules(element)), element)).required && (param = data.required, 
                delete data.required, data = $.extend({
                    required: param
                }, data), $(element).attr("aria-required", "true")), data.remote && (param = data.remote, 
                delete data.remote, data = $.extend(data, {
                    remote: param
                })), data;
            }
        }
    }), $.extend($.expr.pseudos || $.expr[":"], {
        blank: function(a) {
            return !$.trim("" + $(a).val());
        },
        filled: function(a) {
            var val = $(a).val();
            return null !== val && !!$.trim("" + val);
        },
        unchecked: function(a) {
            return !$(a).prop("checked");
        }
    }), $.validator = function(options, form) {
        this.settings = $.extend(!0, {}, $.validator.defaults, options), this.currentForm = form, 
        this.init();
    }, $.validator.format = function(source, params) {
        return 1 === arguments.length ? function() {
            var args = $.makeArray(arguments);
            return args.unshift(source), $.validator.format.apply(this, args);
        } : void 0 === params ? source : (arguments.length > 2 && params.constructor !== Array && (params = $.makeArray(arguments).slice(1)), 
        params.constructor !== Array && (params = [ params ]), $.each(params, function(i, n) {
            source = source.replace(new RegExp("\\{" + i + "\\}", "g"), function() {
                return n;
            });
        }), source);
    }, $.extend($.validator, {
        defaults: {
            messages: {},
            groups: {},
            rules: {},
            errorClass: "error",
            pendingClass: "pending",
            validClass: "valid",
            errorElement: "label",
            focusCleanup: !1,
            focusInvalid: !0,
            errorContainer: $([]),
            errorLabelContainer: $([]),
            onsubmit: !0,
            ignore: ":hidden",
            ignoreTitle: !1,
            onfocusin: function(element) {
                this.lastActive = element, this.settings.focusCleanup && (this.settings.unhighlight && this.settings.unhighlight.call(this, element, this.settings.errorClass, this.settings.validClass), 
                this.hideThese(this.errorsFor(element)));
            },
            onfocusout: function(element) {
                this.checkable(element) || !(element.name in this.submitted) && this.optional(element) || this.element(element);
            },
            onkeyup: function(element, event) {
                var excludedKeys = [ 16, 17, 18, 20, 35, 36, 37, 38, 39, 40, 45, 144, 225 ];
                9 === event.which && "" === this.elementValue(element) || -1 !== $.inArray(event.keyCode, excludedKeys) || (element.name in this.submitted || element.name in this.invalid) && this.element(element);
            },
            onclick: function(element) {
                element.name in this.submitted ? this.element(element) : element.parentNode.name in this.submitted && this.element(element.parentNode);
            },
            highlight: function(element, errorClass, validClass) {
                "radio" === element.type ? this.findByName(element.name).addClass(errorClass).removeClass(validClass) : $(element).addClass(errorClass).removeClass(validClass);
            },
            unhighlight: function(element, errorClass, validClass) {
                "radio" === element.type ? this.findByName(element.name).removeClass(errorClass).addClass(validClass) : $(element).removeClass(errorClass).addClass(validClass);
            }
        },
        setDefaults: function(settings) {
            $.extend($.validator.defaults, settings);
        },
        messages: {
            required: "This field is required.",
            remote: "Please fix this field.",
            email: "Please enter a valid email address.",
            url: "Please enter a valid URL.",
            date: "Please enter a valid date.",
            dateISO: "Please enter a valid date (ISO).",
            number: "Please enter a valid number.",
            digits: "Please enter only digits.",
            equalTo: "Please enter the same value again.",
            maxlength: $.validator.format("Please enter no more than {0} characters."),
            minlength: $.validator.format("Please enter at least {0} characters."),
            rangelength: $.validator.format("Please enter a value between {0} and {1} characters long."),
            range: $.validator.format("Please enter a value between {0} and {1}."),
            max: $.validator.format("Please enter a value less than or equal to {0}."),
            min: $.validator.format("Please enter a value greater than or equal to {0}."),
            step: $.validator.format("Please enter a multiple of {0}.")
        },
        autoCreateRanges: !1,
        prototype: {
            init: function() {
                function delegate(event) {
                    !this.form && this.hasAttribute("contenteditable") && (this.form = $(this).closest("form")[0]);
                    var validator = $.data(this.form, "validator"), eventType = "on" + event.type.replace(/^validate/, ""), settings = validator.settings;
                    settings[eventType] && !$(this).is(settings.ignore) && settings[eventType].call(validator, this, event);
                }
                this.labelContainer = $(this.settings.errorLabelContainer), this.errorContext = this.labelContainer.length && this.labelContainer || $(this.currentForm), 
                this.containers = $(this.settings.errorContainer).add(this.settings.errorLabelContainer), 
                this.submitted = {}, this.valueCache = {}, this.pendingRequest = 0, this.pending = {}, 
                this.invalid = {}, this.reset();
                var rules, groups = this.groups = {};
                $.each(this.settings.groups, function(key, value) {
                    "string" == typeof value && (value = value.split(/\s/)), $.each(value, function(index, name) {
                        groups[name] = key;
                    });
                }), rules = this.settings.rules, $.each(rules, function(key, value) {
                    rules[key] = $.validator.normalizeRule(value);
                }), $(this.currentForm).on("focusin.validate focusout.validate keyup.validate", ":text, [type='password'], [type='file'], select, textarea, [type='number'], [type='search'], [type='tel'], [type='url'], [type='email'], [type='datetime'], [type='date'], [type='month'], [type='week'], [type='time'], [type='datetime-local'], [type='range'], [type='color'], [type='radio'], [type='checkbox'], [contenteditable], [type='button']", delegate).on("click.validate", "select, option, [type='radio'], [type='checkbox']", delegate), 
                this.settings.invalidHandler && $(this.currentForm).on("invalid-form.validate", this.settings.invalidHandler), 
                $(this.currentForm).find("[required], [data-rule-required], .required").attr("aria-required", "true");
            },
            form: function() {
                return this.checkForm(), $.extend(this.submitted, this.errorMap), this.invalid = $.extend({}, this.errorMap), 
                this.valid() || $(this.currentForm).triggerHandler("invalid-form", [ this ]), this.showErrors(), 
                this.valid();
            },
            checkForm: function() {
                this.prepareForm();
                for (var i = 0, elements = this.currentElements = this.elements(); elements[i]; i++) this.check(elements[i]);
                return this.valid();
            },
            element: function(element) {
                var rs, group, cleanElement = this.clean(element), checkElement = this.validationTargetFor(cleanElement), v = this, result = !0;
                return void 0 === checkElement ? delete this.invalid[cleanElement.name] : (this.prepareElement(checkElement), 
                this.currentElements = $(checkElement), (group = this.groups[checkElement.name]) && $.each(this.groups, function(name, testgroup) {
                    testgroup === group && name !== checkElement.name && (cleanElement = v.validationTargetFor(v.clean(v.findByName(name)))) && cleanElement.name in v.invalid && (v.currentElements.push(cleanElement), 
                    result = v.check(cleanElement) && result);
                }), rs = !1 !== this.check(checkElement), result = result && rs, this.invalid[checkElement.name] = !rs, 
                this.numberOfInvalids() || (this.toHide = this.toHide.add(this.containers)), this.showErrors(), 
                $(element).attr("aria-invalid", !rs)), result;
            },
            showErrors: function(errors) {
                if (errors) {
                    var validator = this;
                    $.extend(this.errorMap, errors), this.errorList = $.map(this.errorMap, function(message, name) {
                        return {
                            message: message,
                            element: validator.findByName(name)[0]
                        };
                    }), this.successList = $.grep(this.successList, function(element) {
                        return !(element.name in errors);
                    });
                }
                this.settings.showErrors ? this.settings.showErrors.call(this, this.errorMap, this.errorList) : this.defaultShowErrors();
            },
            resetForm: function() {
                $.fn.resetForm && $(this.currentForm).resetForm(), this.invalid = {}, this.submitted = {}, 
                this.prepareForm(), this.hideErrors();
                var elements = this.elements().removeData("previousValue").removeAttr("aria-invalid");
                this.resetElements(elements);
            },
            resetElements: function(elements) {
                var i;
                if (this.settings.unhighlight) for (i = 0; elements[i]; i++) this.settings.unhighlight.call(this, elements[i], this.settings.errorClass, ""), 
                this.findByName(elements[i].name).removeClass(this.settings.validClass); else elements.removeClass(this.settings.errorClass).removeClass(this.settings.validClass);
            },
            numberOfInvalids: function() {
                return this.objectLength(this.invalid);
            },
            objectLength: function(obj) {
                var i, count = 0;
                for (i in obj) obj[i] && count++;
                return count;
            },
            hideErrors: function() {
                this.hideThese(this.toHide);
            },
            hideThese: function(errors) {
                errors.not(this.containers).text(""), this.addWrapper(errors).hide();
            },
            valid: function() {
                return 0 === this.size();
            },
            size: function() {
                return this.errorList.length;
            },
            focusInvalid: function() {
                if (this.settings.focusInvalid) try {
                    $(this.findLastActive() || this.errorList.length && this.errorList[0].element || []).filter(":visible").focus().trigger("focusin");
                } catch (e) {}
            },
            findLastActive: function() {
                var lastActive = this.lastActive;
                return lastActive && 1 === $.grep(this.errorList, function(n) {
                    return n.element.name === lastActive.name;
                }).length && lastActive;
            },
            elements: function() {
                var validator = this, rulesCache = {};
                return $(this.currentForm).find("input, select, textarea, [contenteditable]").not(":submit, :reset, :image, :disabled").not(this.settings.ignore).filter(function() {
                    var name = this.name || $(this).attr("name");
                    return !name && validator.settings.debug && window.console && console.error("%o has no name assigned", this), 
                    this.hasAttribute("contenteditable") && (this.form = $(this).closest("form")[0]), 
                    !(name in rulesCache || !validator.objectLength($(this).rules())) && (rulesCache[name] = !0, 
                    !0);
                });
            },
            clean: function(selector) {
                return $(selector)[0];
            },
            errors: function() {
                var errorClass = this.settings.errorClass.split(" ").join(".");
                return $(this.settings.errorElement + "." + errorClass, this.errorContext);
            },
            resetInternals: function() {
                this.successList = [], this.errorList = [], this.errorMap = {}, this.toShow = $([]), 
                this.toHide = $([]);
            },
            reset: function() {
                this.resetInternals(), this.currentElements = $([]);
            },
            prepareForm: function() {
                this.reset(), this.toHide = this.errors().add(this.containers);
            },
            prepareElement: function(element) {
                this.reset(), this.toHide = this.errorsFor(element);
            },
            elementValue: function(element) {
                var val, idx, $element = $(element), type = element.type;
                return "radio" === type || "checkbox" === type ? this.findByName(element.name).filter(":checked").val() : "number" === type && void 0 !== element.validity ? element.validity.badInput ? "NaN" : $element.val() : (val = element.hasAttribute("contenteditable") ? $element.text() : $element.val(), 
                "file" === type ? "C:\\fakepath\\" === val.substr(0, 12) ? val.substr(12) : (idx = val.lastIndexOf("/")) >= 0 ? val.substr(idx + 1) : (idx = val.lastIndexOf("\\"), 
                idx >= 0 ? val.substr(idx + 1) : val) : "string" == typeof val ? val.replace(/\r/g, "") : val);
            },
            check: function(element) {
                element = this.validationTargetFor(this.clean(element));
                var result, method, rule, rules = $(element).rules(), rulesCount = $.map(rules, function(n, i) {
                    return i;
                }).length, dependencyMismatch = !1, val = this.elementValue(element);
                if ("function" == typeof rules.normalizer) {
                    if ("string" != typeof (val = rules.normalizer.call(element, val))) throw new TypeError("The normalizer should return a string value.");
                    delete rules.normalizer;
                }
                for (method in rules) {
                    rule = {
                        method: method,
                        parameters: rules[method]
                    };
                    try {
                        if ("dependency-mismatch" === (result = $.validator.methods[method].call(this, val, element, rule.parameters)) && 1 === rulesCount) {
                            dependencyMismatch = !0;
                            continue;
                        }
                        if (dependencyMismatch = !1, "pending" === result) return void (this.toHide = this.toHide.not(this.errorsFor(element)));
                        if (!result) return this.formatAndAdd(element, rule), !1;
                    } catch (e) {
                        throw this.settings.debug && window.console && console.log("Exception occurred when checking element " + element.id + ", check the '" + rule.method + "' method.", e), 
                        e instanceof TypeError && (e.message += ".  Exception occurred when checking element " + element.id + ", check the '" + rule.method + "' method."), 
                        e;
                    }
                }
                if (!dependencyMismatch) return this.objectLength(rules) && this.successList.push(element), 
                !0;
            },
            customDataMessage: function(element, method) {
                return $(element).data("msg" + method.charAt(0).toUpperCase() + method.substring(1).toLowerCase()) || $(element).data("msg");
            },
            customMessage: function(name, method) {
                var m = this.settings.messages[name];
                return m && (m.constructor === String ? m : m[method]);
            },
            findDefined: function() {
                for (var i = 0; i < arguments.length; i++) if (void 0 !== arguments[i]) return arguments[i];
            },
            defaultMessage: function(element, rule) {
                "string" == typeof rule && (rule = {
                    method: rule
                });
                var message = this.findDefined(this.customMessage(element.name, rule.method), this.customDataMessage(element, rule.method), !this.settings.ignoreTitle && element.title || void 0, $.validator.messages[rule.method], "<strong>Warning: No message defined for " + element.name + "</strong>"), theregex = /\$?\{(\d+)\}/g;
                return "function" == typeof message ? message = message.call(this, rule.parameters, element) : theregex.test(message) && (message = $.validator.format(message.replace(theregex, "{$1}"), rule.parameters)), 
                message;
            },
            formatAndAdd: function(element, rule) {
                var message = this.defaultMessage(element, rule);
                this.errorList.push({
                    message: message,
                    element: element,
                    method: rule.method
                }), this.errorMap[element.name] = message, this.submitted[element.name] = message;
            },
            addWrapper: function(toToggle) {
                return this.settings.wrapper && (toToggle = toToggle.add(toToggle.parent(this.settings.wrapper))), 
                toToggle;
            },
            defaultShowErrors: function() {
                var i, elements, error;
                for (i = 0; this.errorList[i]; i++) error = this.errorList[i], this.settings.highlight && this.settings.highlight.call(this, error.element, this.settings.errorClass, this.settings.validClass), 
                this.showLabel(error.element, error.message);
                if (this.errorList.length && (this.toShow = this.toShow.add(this.containers)), this.settings.success) for (i = 0; this.successList[i]; i++) this.showLabel(this.successList[i]);
                if (this.settings.unhighlight) for (i = 0, elements = this.validElements(); elements[i]; i++) this.settings.unhighlight.call(this, elements[i], this.settings.errorClass, this.settings.validClass);
                this.toHide = this.toHide.not(this.toShow), this.hideErrors(), this.addWrapper(this.toShow).show();
            },
            validElements: function() {
                return this.currentElements.not(this.invalidElements());
            },
            invalidElements: function() {
                return $(this.errorList).map(function() {
                    return this.element;
                });
            },
            showLabel: function(element, message) {
                var place, group, errorID, v, error = this.errorsFor(element), elementID = this.idOrName(element), describedBy = $(element).attr("aria-describedby");
                error.length ? (error.removeClass(this.settings.validClass).addClass(this.settings.errorClass), 
                error.html(message)) : (place = error = $("<" + this.settings.errorElement + ">").attr("id", elementID + "-error").addClass(this.settings.errorClass).html(message || ""), 
                this.settings.wrapper && (place = error.hide().show().wrap("<" + this.settings.wrapper + "/>").parent()), 
                this.labelContainer.length ? this.labelContainer.append(place) : this.settings.errorPlacement ? this.settings.errorPlacement.call(this, place, $(element)) : place.insertAfter(element), 
                error.is("label") ? error.attr("for", elementID) : 0 === error.parents("label[for='" + this.escapeCssMeta(elementID) + "']").length && (errorID = error.attr("id"), 
                describedBy ? describedBy.match(new RegExp("\\b" + this.escapeCssMeta(errorID) + "\\b")) || (describedBy += " " + errorID) : describedBy = errorID, 
                $(element).attr("aria-describedby", describedBy), (group = this.groups[element.name]) && (v = this, 
                $.each(v.groups, function(name, testgroup) {
                    testgroup === group && $("[name='" + v.escapeCssMeta(name) + "']", v.currentForm).attr("aria-describedby", error.attr("id"));
                })))), !message && this.settings.success && (error.text(""), "string" == typeof this.settings.success ? error.addClass(this.settings.success) : this.settings.success(error, element)), 
                this.toShow = this.toShow.add(error);
            },
            errorsFor: function(element) {
                var name = this.escapeCssMeta(this.idOrName(element)), describer = $(element).attr("aria-describedby"), selector = "label[for='" + name + "'], label[for='" + name + "'] *";
                return describer && (selector = selector + ", #" + this.escapeCssMeta(describer).replace(/\s+/g, ", #")), 
                this.errors().filter(selector);
            },
            escapeCssMeta: function(string) {
                return string.replace(/([\\!"#$%&'()*+,./:;<=>?@\[\]^`{|}~])/g, "\\$1");
            },
            idOrName: function(element) {
                return this.groups[element.name] || (this.checkable(element) ? element.name : element.id || element.name);
            },
            validationTargetFor: function(element) {
                return this.checkable(element) && (element = this.findByName(element.name)), $(element).not(this.settings.ignore)[0];
            },
            checkable: function(element) {
                return /radio|checkbox/i.test(element.type);
            },
            findByName: function(name) {
                return $(this.currentForm).find("[name='" + this.escapeCssMeta(name) + "']");
            },
            getLength: function(value, element) {
                switch (element.nodeName.toLowerCase()) {
                  case "select":
                    return $("option:selected", element).length;

                  case "input":
                    if (this.checkable(element)) return this.findByName(element.name).filter(":checked").length;
                }
                return value.length;
            },
            depend: function(param, element) {
                return !this.dependTypes[typeof param] || this.dependTypes[typeof param](param, element);
            },
            dependTypes: {
                boolean: function(param) {
                    return param;
                },
                string: function(param, element) {
                    return !!$(param, element.form).length;
                },
                function: function(param, element) {
                    return param(element);
                }
            },
            optional: function(element) {
                var val = this.elementValue(element);
                return !$.validator.methods.required.call(this, val, element) && "dependency-mismatch";
            },
            startRequest: function(element) {
                this.pending[element.name] || (this.pendingRequest++, $(element).addClass(this.settings.pendingClass), 
                this.pending[element.name] = !0);
            },
            stopRequest: function(element, valid) {
                --this.pendingRequest < 0 && (this.pendingRequest = 0), delete this.pending[element.name], 
                $(element).removeClass(this.settings.pendingClass), valid && 0 === this.pendingRequest && this.formSubmitted && this.form() ? ($(this.currentForm).submit(), 
                this.formSubmitted = !1) : !valid && 0 === this.pendingRequest && this.formSubmitted && ($(this.currentForm).triggerHandler("invalid-form", [ this ]), 
                this.formSubmitted = !1);
            },
            previousValue: function(element, method) {
                return method = "string" == typeof method && method || "remote", $.data(element, "previousValue") || $.data(element, "previousValue", {
                    old: null,
                    valid: !0,
                    message: this.defaultMessage(element, {
                        method: method
                    })
                });
            },
            destroy: function() {
                this.resetForm(), $(this.currentForm).off(".validate").removeData("validator").find(".validate-equalTo-blur").off(".validate-equalTo").removeClass("validate-equalTo-blur");
            }
        },
        classRuleSettings: {
            required: {
                required: !0
            },
            email: {
                email: !0
            },
            url: {
                url: !0
            },
            date: {
                date: !0
            },
            dateISO: {
                dateISO: !0
            },
            number: {
                number: !0
            },
            digits: {
                digits: !0
            },
            creditcard: {
                creditcard: !0
            }
        },
        addClassRules: function(className, rules) {
            className.constructor === String ? this.classRuleSettings[className] = rules : $.extend(this.classRuleSettings, className);
        },
        classRules: function(element) {
            var rules = {}, classes = $(element).attr("class");
            return classes && $.each(classes.split(" "), function() {
                this in $.validator.classRuleSettings && $.extend(rules, $.validator.classRuleSettings[this]);
            }), rules;
        },
        normalizeAttributeRule: function(rules, type, method, value) {
            /min|max|step/.test(method) && (null === type || /number|range|text/.test(type)) && (value = Number(value), 
            isNaN(value) && (value = void 0)), value || 0 === value ? rules[method] = value : type === method && "range" !== type && (rules[method] = !0);
        },
        attributeRules: function(element) {
            var method, value, rules = {}, $element = $(element), type = element.getAttribute("type");
            for (method in $.validator.methods) "required" === method ? ("" === (value = element.getAttribute(method)) && (value = !0), 
            value = !!value) : value = $element.attr(method), this.normalizeAttributeRule(rules, type, method, value);
            return rules.maxlength && /-1|2147483647|524288/.test(rules.maxlength) && delete rules.maxlength, 
            rules;
        },
        dataRules: function(element) {
            var method, value, rules = {}, $element = $(element), type = element.getAttribute("type");
            for (method in $.validator.methods) value = $element.data("rule" + method.charAt(0).toUpperCase() + method.substring(1).toLowerCase()), 
            this.normalizeAttributeRule(rules, type, method, value);
            return rules;
        },
        staticRules: function(element) {
            var rules = {}, validator = $.data(element.form, "validator");
            return validator.settings.rules && (rules = $.validator.normalizeRule(validator.settings.rules[element.name]) || {}), 
            rules;
        },
        normalizeRules: function(rules, element) {
            return $.each(rules, function(prop, val) {
                if (!1 !== val) {
                    if (val.param || val.depends) {
                        var keepRule = !0;
                        switch (typeof val.depends) {
                          case "string":
                            keepRule = !!$(val.depends, element.form).length;
                            break;

                          case "function":
                            keepRule = val.depends.call(element, element);
                        }
                        keepRule ? rules[prop] = void 0 === val.param || val.param : ($.data(element.form, "validator").resetElements($(element)), 
                        delete rules[prop]);
                    }
                } else delete rules[prop];
            }), $.each(rules, function(rule, parameter) {
                rules[rule] = $.isFunction(parameter) && "normalizer" !== rule ? parameter(element) : parameter;
            }), $.each([ "minlength", "maxlength" ], function() {
                rules[this] && (rules[this] = Number(rules[this]));
            }), $.each([ "rangelength", "range" ], function() {
                var parts;
                rules[this] && ($.isArray(rules[this]) ? rules[this] = [ Number(rules[this][0]), Number(rules[this][1]) ] : "string" == typeof rules[this] && (parts = rules[this].replace(/[\[\]]/g, "").split(/[\s,]+/), 
                rules[this] = [ Number(parts[0]), Number(parts[1]) ]));
            }), $.validator.autoCreateRanges && (null != rules.min && null != rules.max && (rules.range = [ rules.min, rules.max ], 
            delete rules.min, delete rules.max), null != rules.minlength && null != rules.maxlength && (rules.rangelength = [ rules.minlength, rules.maxlength ], 
            delete rules.minlength, delete rules.maxlength)), rules;
        },
        normalizeRule: function(data) {
            if ("string" == typeof data) {
                var transformed = {};
                $.each(data.split(/\s/), function() {
                    transformed[this] = !0;
                }), data = transformed;
            }
            return data;
        },
        addMethod: function(name, method, message) {
            $.validator.methods[name] = method, $.validator.messages[name] = void 0 !== message ? message : $.validator.messages[name], 
            method.length < 3 && $.validator.addClassRules(name, $.validator.normalizeRule(name));
        },
        methods: {
            required: function(value, element, param) {
                if (!this.depend(param, element)) return "dependency-mismatch";
                if ("select" === element.nodeName.toLowerCase()) {
                    var val = $(element).val();
                    return val && val.length > 0;
                }
                return this.checkable(element) ? this.getLength(value, element) > 0 : value.length > 0;
            },
            email: function(value, element) {
                return this.optional(element) || /^[a-zA-Z0-9.!#$%&'*+\/=?^_`{|}~-]+@[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)*$/.test(value);
            },
            url: function(value, element) {
                return this.optional(element) || /^(?:(?:(?:https?|ftp):)?\/\/)(?:\S+(?::\S*)?@)?(?:(?!(?:10|127)(?:\.\d{1,3}){3})(?!(?:169\.254|192\.168)(?:\.\d{1,3}){2})(?!172\.(?:1[6-9]|2\d|3[0-1])(?:\.\d{1,3}){2})(?:[1-9]\d?|1\d\d|2[01]\d|22[0-3])(?:\.(?:1?\d{1,2}|2[0-4]\d|25[0-5])){2}(?:\.(?:[1-9]\d?|1\d\d|2[0-4]\d|25[0-4]))|(?:(?:[a-z\u00a1-\uffff0-9]-*)*[a-z\u00a1-\uffff0-9]+)(?:\.(?:[a-z\u00a1-\uffff0-9]-*)*[a-z\u00a1-\uffff0-9]+)*(?:\.(?:[a-z\u00a1-\uffff]{2,})).?)(?::\d{2,5})?(?:[/?#]\S*)?$/i.test(value);
            },
            date: function(value, element) {
                return this.optional(element) || !/Invalid|NaN/.test(new Date(value).toString());
            },
            dateISO: function(value, element) {
                return this.optional(element) || /^\d{4}[\/\-](0?[1-9]|1[012])[\/\-](0?[1-9]|[12][0-9]|3[01])$/.test(value);
            },
            number: function(value, element) {
                return this.optional(element) || /^(?:-?\d+|-?\d{1,3}(?:,\d{3})+)?(?:\.\d+)?$/.test(value);
            },
            digits: function(value, element) {
                return this.optional(element) || /^\d+$/.test(value);
            },
            minlength: function(value, element, param) {
                var length = $.isArray(value) ? value.length : this.getLength(value, element);
                return this.optional(element) || length >= param;
            },
            maxlength: function(value, element, param) {
                var length = $.isArray(value) ? value.length : this.getLength(value, element);
                return this.optional(element) || length <= param;
            },
            rangelength: function(value, element, param) {
                var length = $.isArray(value) ? value.length : this.getLength(value, element);
                return this.optional(element) || length >= param[0] && length <= param[1];
            },
            min: function(value, element, param) {
                return this.optional(element) || value >= param;
            },
            max: function(value, element, param) {
                return this.optional(element) || value <= param;
            },
            range: function(value, element, param) {
                return this.optional(element) || value >= param[0] && value <= param[1];
            },
            step: function(value, element, param) {
                var decimals, type = $(element).attr("type"), errorMessage = "Step attribute on input type " + type + " is not supported.", supportedTypes = [ "text", "number", "range" ], re = new RegExp("\\b" + type + "\\b"), decimalPlaces = function(num) {
                    var match = ("" + num).match(/(?:\.(\d+))?$/);
                    return match && match[1] ? match[1].length : 0;
                }, toInt = function(num) {
                    return Math.round(num * Math.pow(10, decimals));
                }, valid = !0;
                if (type && !re.test(supportedTypes.join())) throw new Error(errorMessage);
                return decimals = decimalPlaces(param), (decimalPlaces(value) > decimals || toInt(value) % toInt(param) != 0) && (valid = !1), 
                this.optional(element) || valid;
            },
            equalTo: function(value, element, param) {
                var target = $(param);
                return this.settings.onfocusout && target.not(".validate-equalTo-blur").length && target.addClass("validate-equalTo-blur").on("blur.validate-equalTo", function() {
                    $(element).valid();
                }), value === target.val();
            },
            remote: function(value, element, param, method) {
                if (this.optional(element)) return "dependency-mismatch";
                method = "string" == typeof method && method || "remote";
                var validator, data, optionDataString, previous = this.previousValue(element, method);
                return this.settings.messages[element.name] || (this.settings.messages[element.name] = {}), 
                previous.originalMessage = previous.originalMessage || this.settings.messages[element.name][method], 
                this.settings.messages[element.name][method] = previous.message, param = "string" == typeof param && {
                    url: param
                } || param, optionDataString = $.param($.extend({
                    data: value
                }, param.data)), previous.old === optionDataString ? previous.valid : (previous.old = optionDataString, 
                validator = this, this.startRequest(element), data = {}, data[element.name] = value, 
                $.ajax($.extend(!0, {
                    mode: "abort",
                    port: "validate" + element.name,
                    dataType: "json",
                    data: data,
                    context: validator.currentForm,
                    success: function(response) {
                        var errors, message, submitted, valid = !0 === response || "true" === response;
                        validator.settings.messages[element.name][method] = previous.originalMessage, valid ? (submitted = validator.formSubmitted, 
                        validator.resetInternals(), validator.toHide = validator.errorsFor(element), validator.formSubmitted = submitted, 
                        validator.successList.push(element), validator.invalid[element.name] = !1, validator.showErrors()) : (errors = {}, 
                        message = response || validator.defaultMessage(element, {
                            method: method,
                            parameters: value
                        }), errors[element.name] = previous.message = message, validator.invalid[element.name] = !0, 
                        validator.showErrors(errors)), previous.valid = valid, validator.stopRequest(element, valid);
                    }
                }, param)), "pending");
            }
        }
    });
    var ajax, pendingRequests = {};
    return $.ajaxPrefilter ? $.ajaxPrefilter(function(settings, _, xhr) {
        var port = settings.port;
        "abort" === settings.mode && (pendingRequests[port] && pendingRequests[port].abort(), 
        pendingRequests[port] = xhr);
    }) : (ajax = $.ajax, $.ajax = function(settings) {
        var mode = ("mode" in settings ? settings : $.ajaxSettings).mode, port = ("port" in settings ? settings : $.ajaxSettings).port;
        return "abort" === mode ? (pendingRequests[port] && pendingRequests[port].abort(), 
        pendingRequests[port] = ajax.apply(this, arguments), pendingRequests[port]) : ajax.apply(this, arguments);
    }), $;
});